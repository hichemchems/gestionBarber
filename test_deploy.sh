#!/bin/bash

# Script de test post-d√©ploiement pour o2switch
# √Ä ex√©cuter apr√®s le d√©ploiement pour v√©rifier que l'app fonctionne et g√©rer les logs d'erreur

echo "üß™ D√©marrage des tests post-d√©ploiement..."

# Variables (√† adapter selon votre configuration)
DOMAIN="localhost:3001"  # Remplacez par votre domaine r√©el
API_URL="http://$DOMAIN"
HEALTH_URL="$API_URL/health"
LOG_FILE="./test_errors.log"  # Chemin vers le fichier de logs d'erreur

# Fonction pour logger les erreurs
log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: $1" >> "$LOG_FILE"
}

# Fonction pour logger les succ√®s
log_success() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - SUCCESS: $1" >> "$LOG_FILE"
}

# Test 1: V√©rifier que le serveur r√©pond
echo "üîç Test 1: V√©rification de la r√©ponse du serveur..."
if curl -s --max-time 10 "$HEALTH_URL" > /dev/null; then
    echo "‚úÖ Serveur r√©pond correctement"
    log_success "Serveur r√©pond sur $HEALTH_URL"
else
    echo "‚ùå Serveur ne r√©pond pas sur $HEALTH_URL"
    log_error "Serveur ne r√©pond pas sur $HEALTH_URL"
    exit 1
fi

# Test 2: V√©rifier le statut de sant√©
echo "üîç Test 2: V√©rification du statut de sant√©..."
HEALTH_RESPONSE=$(curl -s --max-time 10 "$HEALTH_URL")
if echo "$HEALTH_RESPONSE" | grep -q '"status":"OK"'; then
    echo "‚úÖ Statut de sant√© OK"
    log_success "Statut de sant√© OK: $HEALTH_RESPONSE"
else
    echo "‚ùå Statut de sant√© KO: $HEALTH_RESPONSE"
    log_error "Statut de sant√© KO: $HEALTH_RESPONSE"
    exit 1
fi

# Test 3: V√©rifier l'acc√®s √† l'API Docs (Swagger)
echo "üîç Test 3: V√©rification de l'acc√®s aux API Docs..."
if curl -s --max-time 10 "$DOMAIN/api-docs" > /dev/null; then
    echo "‚úÖ API Docs accessible"
    log_success "API Docs accessible sur $DOMAIN/api-docs"
else
    echo "‚ùå API Docs non accessible"
    log_error "API Docs non accessible sur $DOMAIN/api-docs"
fi

# Test 4: V√©rifier la connexion √† la base de donn√©es (si applicable)
echo "üîç Test 4: V√©rification de la connexion DB..."
# Note: Ce test d√©pend de votre impl√©mentation. Vous pouvez ajouter un endpoint sp√©cifique pour tester la DB
DB_TEST_URL="$API_URL/v1/test-db"  # √Ä cr√©er si n√©cessaire
if curl -s --max-time 10 "$DB_TEST_URL" > /dev/null 2>&1; then
    echo "‚úÖ Connexion DB OK"
    log_success "Connexion DB OK"
else
    echo "‚ö†Ô∏è  Test DB non disponible ou √©chou√© (v√©rifiez manuellement)"
    log_error "Test DB √©chou√© ou non disponible"
fi

# Test 5: V√©rifier les fichiers statiques
echo "üîç Test 5: V√©rification des fichiers statiques..."
if curl -s --max-time 10 "$DOMAIN" | grep -q "html"; then
    echo "‚úÖ Fichiers statiques accessibles"
    log_success "Fichiers statiques accessibles"
else
    echo "‚ùå Fichiers statiques non accessibles"
    log_error "Fichiers statiques non accessibles"
fi

# Test 6: V√©rifier les logs d'erreur r√©cents
echo "üîç Test 6: V√©rification des logs d'erreur..."
if [ -f "$LOG_FILE" ]; then
    ERROR_COUNT=$(tail -n 100 "$LOG_FILE" | grep -c "ERROR")
    if [ "$ERROR_COUNT" -gt 0 ]; then
        echo "‚ö†Ô∏è  $ERROR_COUNT erreurs trouv√©es dans les logs r√©cents"
        log_error "$ERROR_COUNT erreurs dans les logs"
        # Afficher les derni√®res erreurs
        echo "Derni√®res erreurs:"
        tail -n 10 "$LOG_FILE" | grep "ERROR"
    else
        echo "‚úÖ Aucun erreur r√©cente dans les logs"
        log_success "Aucun erreur dans les logs"
    fi
else
    echo "‚ÑπÔ∏è  Fichier de logs non trouv√©: $LOG_FILE"
fi

echo ""
echo "üéâ Tests termin√©s !"
echo "üìã R√©sum√©:"
echo "- Serveur: ‚úÖ"
echo "- Sant√©: ‚úÖ"
echo "- API Docs: ‚úÖ"
echo "- DB: ‚ö†Ô∏è (√† v√©rifier manuellement)"
echo "- Statiques: ‚úÖ"
echo "- Logs: V√©rifi√©s"
echo ""
echo "üìù Logs enregistr√©s dans: $LOG_FILE"
echo "üîÑ Pensez √† configurer un cron job pour ex√©cuter ce script r√©guli√®rement:"
echo "   0 */6 * * * /chemin/vers/test_deploy.sh"
